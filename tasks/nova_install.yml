---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Record the installation method
  ini_file:
    dest: "/etc/ansible/facts.d/openstack_ansible.fact"
    section: "nova"
    option: "install_method"
    value: "{{ nova_install_method }}"

- name: Refresh local facts to ensure the nova section is present
  setup:
    filter: ansible_local
    gather_subset: "!all"

- name: Install distro packages
  package:
    name: "{{ nova_package_list }}"
    state: "{{ nova_package_state }}"
    update_cache: "{{ (ansible_pkg_mgr in ['apt', 'zypper']) | ternary('yes', omit) }}"
    cache_valid_time: "{{ (ansible_pkg_mgr == 'apt') | ternary(cache_timeout, omit) }}"
  register: install_packages
  until: install_packages is success
  retries: 5
  delay: 2
  tags:
    - nova-pip-packages

- name: Install the python venv
  import_role:
    name: "python_venv_build"
  vars:
    venv_python_executable: "{{ nova_venv_python_executable }}"
    venv_build_constraints: "{{ nova_git_constraints }}"
    venv_build_distro_package_list: "{{ nova_devel_distro_packages }}"
    venv_install_destination_path: "{{ nova_bin | dirname }}"
    venv_pip_install_args: "{{ nova_pip_install_args }}"
    venv_packages_to_symlink: "{{ (nova_services['nova-compute']['group'] in group_names and nova_virt_type != 'ironic') | ternary(nova_compute_kvm_packages_to_symlink, []) }}"
    venv_pip_packages: "{{ nova_venv_packages }}"
    venv_facts_when_changed:
      - section: "nova"
        option: "need_service_restart"
        value: "True"
      - section: "nova"
        option: "need_online_data_migrations"
        value: "True"
      - section: "nova"
        option: "venv_tag"
        value: "{{ nova_venv_tag }}"
  when: nova_install_method == 'source'

- include_tasks: "consoles/nova_console_{{ nova_console_type }}_install.yml"
  when:
    - "nova_services['nova-novncproxy']['group'] in group_names or
        nova_services['nova-spicehtml5proxy']['group'] in group_names or
        nova_services['nova-serialconsole-proxy']['group'] in group_names"
    - "nova_console_type != 'serialconsole'"
  tags:
    - nova-install
    - nova-novnc-console
    - nova-spice-console

- name: Populate service facts
  service_facts:

- name: Disable existing services for any unused console types
  systemd:
    name: "{{ item.service }}"
    enabled: no
    state: stopped
  when: item.service in ansible_facts.services and item.type != nova_console_type
  loop:
    - service: "nova-novncproxy.service"
      type: "novnc"
    - service: "nova-spicehtml5proxy.service"
      type: "spice"
    - service: "nova-serialproxy.service"
      type: "serialconsole"

- name: Initialise the upgrade facts
  ini_file:
    dest: "/etc/ansible/facts.d/openstack_ansible.fact"
    section: nova
    option: "{{ item.name }}"
    value: "{{ item.state }}"
  with_items:
    - name: "need_service_restart"
      state: "True"
    - name: "need_online_data_migrations"
      state: "True"
  when:
    - (install_packages is changed) or
      (ansible_local is not defined) or
      ('openstack_ansible' not in ansible_local) or
      ('nova' not in ansible_local['openstack_ansible']) or
      ('need_online_data_migrations' not in ansible_local['openstack_ansible']['nova']) or
      ('need_service_restart' not in ansible_local['openstack_ansible']['nova'])
